from flask import Flask, render_template, redirect, url_for
from datetime import date, timedelta, datetime
import json
import os

app = Flask(__name__)

PROGRESS_FILE = "progress.json"

def load_progress():
    if os.path.exists(PROGRESS_FILE):
        with open(PROGRESS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_progress(data):
    with open(PROGRESS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

@app.route('/')
def index():
    print("üîÑ –í—Ö—ñ–¥ —É –º–∞—Ä—à—Ä—É—Ç '/'")

    start_date = date(2025, 10, 11)
    end_date = date(2026, 1, 28)
    total_days = (end_date - start_date).days + 1

    print(f"üìÖ –ì–µ–Ω–µ—Ä—É—î–º–æ {total_days} –¥–Ω—ñ–≤ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å")

    progress = load_progress()
    workouts = []
    level = 1

    # –í–∏–±—ñ—Ä —Ñ–æ–Ω—É –∑–∞ –¥–Ω–µ–º —Ç–∏–∂–Ω—è
    day_number = datetime.now().weekday()  # 0 = –ø–æ–Ω–µ–¥—ñ–ª–æ–∫
    chosen_bg = f"images/background{day_number+1}.jpg"

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ñ–∞–π–ª —ñ—Å–Ω—É—î
    bg_path = os.path.join("static", chosen_bg)
    if not os.path.exists(bg_path):
        print(f"‚ö†Ô∏è –§–∞–π–ª —Ñ–æ–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {bg_path}, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ä–µ–∑–µ—Ä–≤–Ω–∏–π")
        chosen_bg = "images/background1.jpg"
    else:
        print(f"üñºÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ñ–æ–Ω: {chosen_bg}")

    for i in range(total_days):
        day_date = start_date + timedelta(days=i)
        title = ""
        exercises = []

        if i % 7 == 0 and i != 0:
            level += 1

        mod = i % 4
        if mod == 0:
            title = "–ë–∞–ª–∞–Ω—Å —Ç–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å"
            exercises = [
                {"name": "–°—Ç–æ—è–Ω–Ω—è –±—ñ–ª—è —Å—Ç—ñ–Ω–∏", "time": f"{10 + level*3} —Å–µ–∫", "sets": "3 –ø—ñ–¥—Ö–æ–¥–∏"},
                {"name": "–ë–∞–ª–∞–Ω—Å—É–≤–∞–Ω–Ω—è –±–µ–∑ —Å—Ç—ñ–Ω–∏", "time": f"{2 + level*1} —Å–µ–∫", "sets": "2 —Å–ø—Ä–æ–±–∏"},
            ]
        elif mod == 1:
            title = "–°–∏–ª–∞ —Ç–∞ –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å"
            exercises = [
                {"name": "–í—ñ–¥–∂–∏–º–∞–Ω–Ω—è —É —Å—Ç—ñ–π—Ü—ñ –±—ñ–ª—è —Å—Ç—ñ–Ω–∏", "reps": f"{3 + level} –ø–æ–≤—Ç–æ—Ä–µ–Ω—å", "sets": "3 –ø—ñ–¥—Ö–æ–¥–∏"},
                {"name": "–ü–ª–∞–Ω–∫–∞ –Ω–∞ —Ä—É–∫–∞—Ö", "time": f"{20 + level*5} —Å–µ–∫", "sets": "3 –ø—ñ–¥—Ö–æ–¥–∏"},
            ]
        elif mod == 2:
            title = "–ö–æ–Ω—Ç—Ä–æ–ª—å —Ç—ñ–ª–∞"
            exercises = [
                {"name": "–ü–µ—Ä–µ—Ö–æ–¥–∏ –∑ –Ω–æ–≥–∏ –Ω–∞ –Ω–æ–≥—É —É —Å—Ç—ñ–π—Ü—ñ", "time": f"{10 + level*3} —Å–µ–∫", "sets": "2 –ø—ñ–¥—Ö–æ–¥–∏"},
                {"name": "–ü—ñ–¥–π–æ–º–∏ —É —Å—Ç—ñ–π–∫—É –∑ –ø—ñ–¥–ª–æ–≥–∏", "reps": f"{2 + level} —Ä–∞–∑–∏", "sets": "3 –ø—ñ–¥—Ö–æ–¥–∏"},
            ]
        else:
            title = "–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è"
            exercises = [
                {"name": "–†–æ–∑—Ç—è–∂–∫–∞ –ø–ª–µ—á–µ–π", "time": f"{60 + level*10} —Å–µ–∫", "sets": "2 –ø—ñ–¥—Ö–æ–¥–∏"},
                {"name": "–î–∏—Ö–∞–ª—å–Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞", "time": "2 —Ö–≤", "sets": "1 —Ä–∞–∑"},
            ]

        done = progress.get(day_date.strftime("%Y-%m-%d"), False)

        workouts.append({
            "date": day_date.strftime("%Y-%m-%d"),
            "title": title,
            "exercises": exercises,
            "done": done
        })

    print(f"üì¶ –ü–µ—Ä–µ–¥–∞—á–∞ —à–∞–±–ª–æ–Ω—É –∑ {len(workouts)} –¥–Ω—è–º–∏")
    return render_template("index.html", workouts=workouts, background=chosen_bg)

@app.route("/complete/<string:day>")
def complete(day):
    progress = load_progress()
    progress[day] = True
    save_progress(progress)
    return redirect(url_for("index"))

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
    app.run(debug=True)